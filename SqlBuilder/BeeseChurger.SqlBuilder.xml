<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BeeseChurger.SqlBuilder</name>
    </assembly>
    <members>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Delete.IDeleteFromBuilder">
            <summary>
            The DeleteFromBuilder Interface
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Delete.IDeleteFromBuilder.Where(System.FormattableString)">
            <summary>
            The Where Method
            
            Use this method to add a where expression 
            </summary>
            <example>
            This sample shows how to call the Where method.
            <code>
            builder.Where("Name LIKE '%abc%'");
            </code>
            </example>
            <param name="where">String representation of the where expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Delete.IDeleteFromBuilder.Where(System.String,System.Object)">
            <summary>
            The Where Method
            </summary>
            <example>
            This example shows how to call the where method
            <code>
            builder.Where("Name", "john");
            </code>
            </example>
            <param name="field">Field to be compared</param>
            <param name="value">Value the field should equal</param>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Delete.IWhereBuilder">
            <summary>
            The IWhereBuilder Interface
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Delete.IWhereBuilder.And(System.FormattableString)">
            <summary>
            The And Method
            
            Use this method after a where to add an AND expression
            </summary>
            <param name="where">string representation of the and expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Delete.IWhereBuilder.And(System.String,System.Object)">
            <summary>
            The And method
            
            Use this method after a where to add an AND expression
            </summary>
            <param name="field">Field/column to compare</param>
            <param name="value">Value to set it equal to</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Delete.IWhereBuilder.Or(System.FormattableString)">
            <summary>
            The Or Method
            
            Use this method after a where to add an OR expression
            </summary>
            <param name="where">string representation of the or expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Delete.IWhereBuilder.Or(System.String,System.Object)">
            <summary>
            The Or method
            
            Use this method after a where to add an OR expression
            </summary>
            <param name="field">Field/column to compare</param>
            <param name="value">Value to set it equal to</param>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Insert.IValuesBuilder">
            <summary>
            The IValuesBuilder interface.
            
            To be used for adding values to your InsertBuilder
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Insert.IValuesBuilder.Values(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            The Values Method
            
            Use this after an insert into method to provide the values to insert into the table.
            </summary>
            <param name="values">Collection of values in the order of the columns previously provided.</param>
            <returns></returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Insert.IValuesBuilder.Value(System.Object)">
            <summary>
            The Value Method
            
            Use this to add a single value to your insert into command.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.ISqlQueryBuilder">
            <summary>
            The ISqlQueryBuilder interface.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.ISqlQueryBuilder.Build">
            <summary>
            The Build Method
            
            Returns the built SQL Query in string format
            </summary>
            <returns>String representation of the SQL Query</returns>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder">
            <summary>
            The IFromBuilder interface
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder.Where(System.FormattableString)">
            <summary>
            The Where Method
            
            Use this method to add a where expression 
            </summary>
            <example>
            This sample shows how to call the Where method.
            <code>
            builder.Where("Name LIKE '%abc%'");
            </code>
            </example>
            <param name="where">String representation of the where expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder.Where(System.String,System.Object)">
            <summary>
            The Where Method
            </summary>
            <example>
            This example shows how to call the where method
            <code>
            builder.Where("Name", "john");
            </code>
            </example>
            <param name="field">Field to be compared</param>
            <param name="value">Value the field should equal</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder.InnerJoin(System.String)">
            <summary>
            The Inner Join Method
            
            Use this method to inner join a table to the initial FROM
            </summary>
            <example>
            <code>
            builder.Select("*").From("table").InnerJoin("otherTable").On("a = b");
            </code>
            </example>
            <param name="joiningTable">Table to be joined</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder.RightJoin(System.String)">
            <summary>
            The Right Join Method
            
            Use this method to right join a table to the initial FROM
            </summary>
            <example>
            <code>
            builder.Select("*").From("table").RightJoin("otherTable").On("a = b");
            </code>
            </example>
            <param name="joiningTable">Table to be joined</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder.LeftJoin(System.String)">
            <summary>
            The Left Join Method
            
            Use this method to Left join a table to the initial FROM
            </summary>
            <example>
            <code>
            builder.Select("*").From("table").LeftJoin("otherTable").On("a = b");
            </code>
            </example>
            <param name="joiningTable">Table to be joined</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder.OrderBy(System.String)">
            <summary>
            The OrderBy Method
            
            Use this method to apply a field to order the query by
            </summary>
            <example>
            <code>
            builder.Select("*").From("table").OrderBy("a");
            </code>
            </example>
            <param name="field"></param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IFromBuilder.Paginate(System.Int32,System.Int32)">
            <summary>
            The Paginate Method
            </summary>
            <example>
            <code>
            builder.Select("*").From("table").Paginate(4, 20);
            </code>
            </example>
            <param name="pageNumber">integer of the page number to retrieve</param>
            <param name="pageSize">integer of the page size</param>
            <returns></returns>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Select.IJoinBuilder">
            <summary>
            The IJoinBuilder interface.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IJoinBuilder.On(System.String)">
            <summary>
            The On Method
            
            Use this method after a Join method to set your on clause
            </summary>
            <example>
            <code>
            builder.Select("*").From("table").LeftJoin("otherTable").On("a = b");
            </code>
            </example>
            <param name="on">String representation of the on clause</param>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Select.IOrderByBuilder">
            <summary>
            The IOrderByBuilder interface.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IOrderByBuilder.Ascending">
            <summary>
            The Ascending Method
            
            Use this after an OrderBy Method to add an ASC to your SQL query
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IOrderByBuilder.Descending">
            <summary>
            The Descending Method
            
            Use this Method after an OrderBy to add a DESC to your SQL query
            </summary>
            <returns></returns>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Select.ISelectBuilder">
            <summary>
            The ISelectBuilder interface
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.ISelectBuilder.Select(System.String)">
            <summary>
            The Select method
            
            Use this to initiate a SQL Select query
            </summary>
            <param name="select">String representation of the fields to be selected</param>
            <returns>Current instance of ISelectBuilder</returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.ISelectBuilder.From(System.String)">
            <summary>
            The From Method
            
            Use this after a Select method to select a table to query
            </summary>
            <param name="table">String representation of the SQL table to be queried</param>
            <returns>Current instance of IFromBuilder</returns>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Select.IWhereBuilder">
            <summary>
            The IWhereBuilder interface.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IWhereBuilder.And(System.FormattableString)">
            <summary>
            The And Method
            
            Use this method after a where to add an AND expression
            </summary>
            <param name="where">string representation of the and expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IWhereBuilder.And(System.String,System.Object)">
            <summary>
            The And method
            
            Use this method after a where to add an AND expression
            </summary>
            <param name="field">Field/column to compare</param>
            <param name="value">Value to set it equal to</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IWhereBuilder.Or(System.FormattableString)">
            <summary>
            The Or Method
            
            Use this method after a where to add an OR expression
            </summary>
            <param name="where">string representation of the or expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IWhereBuilder.Or(System.String,System.Object)">
            <summary>
            The Or method
            
            Use this method after a where to add an OR expression
            </summary>
            <param name="field">Field/column to compare</param>
            <param name="value">Value to set it equal to</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IWhereBuilder.OrderBy(System.String)">
            <summary>
            The OrderBy Method
            
            Use this method to add an Order By expression in a SQL query
            </summary>
            <param name="orderBy">field/column to order by</param>
            <returns></returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Select.IWhereBuilder.Paginate(System.Int32,System.Int32)">
            <summary>
            The Paginate Method
            </summary>
            <example>
            <code>
            builder.Select("*").From("table").Paginate(4, 20);
            </code>
            </example>
            <param name="pageNumber">integer of the page number to retrieve</param>
            <param name="pageSize">integer of the page size</param>
            <returns></returns>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Update.ISetBuilder">
            <summary>
            The ISetBuilder interface.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.ISetBuilder.Set(System.FormattableString)">
            <summary>
            The Set Method
            
            Use this to set the fields/values in your update query
            </summary>
            <example>
            <code>
            builder.Update("table").Set("x = 6");
            </code>
            </example>
            <param name="sets"></param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.ISetBuilder.Set(System.String,System.Object)">
            <summary>
            The Set Method
            
            Use this to set the fields/values in your update query
            </summary>
            <example>
            <code>
            builder.Update("table").Set(x, 6);
            </code>
            </example>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.ISetBuilder.Where(System.FormattableString)">
            <summary>
            The Where Method
            
            Use this method to add a where expression 
            </summary>
            <example>
            This sample shows how to call the Where method.
            <code>
            builder.Where("Name LIKE '%abc%'");
            </code>
            </example>
            <param name="where">String representation of the where expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.ISetBuilder.Where(System.String,System.Object)">
            <summary>
            The Where Method
            </summary>
            <example>
            This example shows how to call the where method
            <code>
            builder.Where("Name", "john");
            </code>
            </example>
            <param name="field">Field to be compared</param>
            <param name="value">Value the field should equal</param>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Builders.Update.IWhereBuilder">
            <summary>
            The IWhereBuilder interface.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.IWhereBuilder.And(System.FormattableString)">
            <summary>
            The And Method
            
            Use this method after a where to add an AND expression
            </summary>
            <param name="where">string representation of the and expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.IWhereBuilder.And(System.String,System.Object)">
            <summary>
            The And method
            
            Use this method after a where to add an AND expression
            </summary>
            <param name="field">Field/column to compare</param>
            <param name="value">Value to set it equal to</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.IWhereBuilder.Or(System.FormattableString)">
            <summary>
            The Or Method
            
            Use this method after a where to add an OR expression
            </summary>
            <param name="where">string representation of the or expression</param>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Builders.Update.IWhereBuilder.Or(System.String,System.Object)">
            <summary>
            The Or method
            
            Use this method after a where to add an OR expression
            </summary>
            <param name="field">Field/column to compare</param>
            <param name="value">Value to set it equal to</param>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.DeleteBuilder">
            <summary>
            Fluent builder class to build a delete from SQL query.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.DeleteFrom(System.String)">
            <summary>
            The DeleteFrom method
            
            To be used to initialise a new DeleteFrom SQL statement.
            </summary>
            <param name="table">string containing the table to be deleted from.</param>
            <returns>IDeleteFromBuilder to add to the statement.</returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.Where(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.Where(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.And(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.And(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.Or(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.Or(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.DeleteBuilder.Build">
            <inheritdoc/>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.InsertBuilder">
            <summary>
            The InsertBuilder fluent builder class.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.InsertBuilder.InsertInto(System.String,System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             The Insert Into Method
            
             Use this to instantiate your insert into query with a table and collection of column names
             </summary>
             <param name="table">string representation of the name of the table to be inserted to</param>
             <param name="columns">Collection containing the names of each column</param>
             <returns>IValuesBuilder</returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.InsertBuilder.Value(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.InsertBuilder.Values(System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.InsertBuilder.Build">
            <inheritdoc/>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Misc.ParameterValidator">
            <summary>
            ParameterValidator class
            
            This class contains extension methods to validate SQL parameters.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Misc.ParameterValidator.ContainsSqlInjection(System.String)">
            <summary>
            Check if the given string contains any SQL injection keywords.
            </summary>
            <param name="userInput">String to be passed as a parameter.</param>
            <returns>True if it does contain any of the keywords, False if not.</returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Misc.ParameterValidator.ContainsSqlInjection(System.FormattableString)">
            <summary>
            Checks all arguments in a formattable string for SQL injection.
            </summary>
            <param name="str">Formattable string to be passed to the database.</param>
            <returns>True if it does contain any of the keywords, False if not.</returns>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Misc.SqlBuilderHelper">
            <summary>
            The SqlBuilderHelper class
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Misc.SqlBuilderHelper.ToSqlParameter(System.Object)">
            <summary>
            The ToSqlParameter extension method
            
            Extension method to convert an object to a string 
            representation of if you were to use it as a SQL parameter
            </summary>
            <param name="parameter">SQL Parameter to be converted</param>
            <returns>String representation of the parameter as a SQL parameter</returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Misc.SqlBuilderHelper.ToSqlParameter(System.Object,System.Data.SqlDbType)">
            <summary>
            The ToSqlParameter extension method
            
            Extension method to convert an object to a string 
            representation of if you were to use it as a SQL parameter
            </summary>
            <param name="parameter">Sql Parameter to be converted.</param>
            <param name="dbType">Database type that it should be passed as.</param>
            <returns>String representation of the parameter to be passed to the database.</returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Misc.SqlBuilderHelper.RemoveTrailingComma(System.Text.StringBuilder)">
            <summary>
            Extension method to remove a trailing comma
            Removes trailing comma at the second to last position in a string builder
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.Misc.SqlInjectionException">
            <summary>
            The SqlInjectionException class.
            
            Exception class to be thrown if a SQL Injection is attempted.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Misc.SqlInjectionException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.Misc.SqlInjectionException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.SelectBuilder">
            <summary>
            The SelectBuilder fluent builder class.
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Init">
            <summary>
            The Init Method 
            
            Use this to initialise a new SelectBuilder statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Select(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.From(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Where(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Where(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.And(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.And(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Or(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Or(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.InnerJoin(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.RightJoin(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.LeftJoin(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.On(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.OrderBy(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Ascending">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Descending">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Paginate(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.SelectBuilder.Build">
            <inheritdoc/>
        </member>
        <member name="T:BeeseChurger.SqlBuilder.UpdateBuilder">
            <summary>
            The UpdateBuilder fluent builder class 
            </summary>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Update(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Set(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Set(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Where(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Where(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.And(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.And(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Or(System.FormattableString)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Or(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BeeseChurger.SqlBuilder.UpdateBuilder.Build">
            <inheritdoc/>
        </member>
    </members>
</doc>
